//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twitter.TwitterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TwitLocal", Namespace="http://schemas.datacontract.org/2004/07/TwitterService")]
    [System.SerializableAttribute()]
    public partial class TwitLocal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FavField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isFavField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fav {
            get {
                return this.FavField;
            }
            set {
                if ((this.FavField.Equals(value) != true)) {
                    this.FavField = value;
                    this.RaisePropertyChanged("Fav");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isFav {
            get {
                return this.isFavField;
            }
            set {
                if ((this.isFavField.Equals(value) != true)) {
                    this.isFavField = value;
                    this.RaisePropertyChanged("isFav");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KisiLocal", Namespace="http://schemas.datacontract.org/2004/07/TwitterService")]
    [System.SerializableAttribute()]
    public partial class KisiLocal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TwitterService.ITwitter")]
    public interface ITwitter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Register", ReplyAction="http://tempuri.org/ITwitter/RegisterResponse")]
        int Register(string email, string username, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Register", ReplyAction="http://tempuri.org/ITwitter/RegisterResponse")]
        System.Threading.Tasks.Task<int> RegisterAsync(string email, string username, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Login", ReplyAction="http://tempuri.org/ITwitter/LoginResponse")]
        int Login(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Login", ReplyAction="http://tempuri.org/ITwitter/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Update", ReplyAction="http://tempuri.org/ITwitter/UpdateResponse")]
        bool Update(int id, string email, string username, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Update", ReplyAction="http://tempuri.org/ITwitter/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(int id, string email, string username, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Follow", ReplyAction="http://tempuri.org/ITwitter/FollowResponse")]
        bool Follow(int follower, int followed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Follow", ReplyAction="http://tempuri.org/ITwitter/FollowResponse")]
        System.Threading.Tasks.Task<bool> FollowAsync(int follower, int followed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/NewTwitControl", ReplyAction="http://tempuri.org/ITwitter/NewTwitControlResponse")]
        int NewTwitControl(int id, System.DateTime lastDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/NewTwitControl", ReplyAction="http://tempuri.org/ITwitter/NewTwitControlResponse")]
        System.Threading.Tasks.Task<int> NewTwitControlAsync(int id, System.DateTime lastDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetNewTwits", ReplyAction="http://tempuri.org/ITwitter/GetNewTwitsResponse")]
        Twitter.TwitterService.TwitLocal[] GetNewTwits(int id, System.DateTime lastDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetNewTwits", ReplyAction="http://tempuri.org/ITwitter/GetNewTwitsResponse")]
        System.Threading.Tasks.Task<Twitter.TwitterService.TwitLocal[]> GetNewTwitsAsync(int id, System.DateTime lastDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/AddNewTwit", ReplyAction="http://tempuri.org/ITwitter/AddNewTwitResponse")]
        bool AddNewTwit(int id, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/AddNewTwit", ReplyAction="http://tempuri.org/ITwitter/AddNewTwitResponse")]
        System.Threading.Tasks.Task<bool> AddNewTwitAsync(int id, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/TwitFav", ReplyAction="http://tempuri.org/ITwitter/TwitFavResponse")]
        bool TwitFav(int id, int twitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/TwitFav", ReplyAction="http://tempuri.org/ITwitter/TwitFavResponse")]
        System.Threading.Tasks.Task<bool> TwitFavAsync(int id, int twitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetAllTwits", ReplyAction="http://tempuri.org/ITwitter/GetAllTwitsResponse")]
        Twitter.TwitterService.TwitLocal[] GetAllTwits(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetAllTwits", ReplyAction="http://tempuri.org/ITwitter/GetAllTwitsResponse")]
        System.Threading.Tasks.Task<Twitter.TwitterService.TwitLocal[]> GetAllTwitsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetUser", ReplyAction="http://tempuri.org/ITwitter/GetUserResponse")]
        Twitter.TwitterService.KisiLocal GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/GetUser", ReplyAction="http://tempuri.org/ITwitter/GetUserResponse")]
        System.Threading.Tasks.Task<Twitter.TwitterService.KisiLocal> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Search", ReplyAction="http://tempuri.org/ITwitter/SearchResponse")]
        Twitter.TwitterService.KisiLocal Search(string contains);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITwitter/Search", ReplyAction="http://tempuri.org/ITwitter/SearchResponse")]
        System.Threading.Tasks.Task<Twitter.TwitterService.KisiLocal> SearchAsync(string contains);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITwitterChannel : Twitter.TwitterService.ITwitter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TwitterClient : System.ServiceModel.ClientBase<Twitter.TwitterService.ITwitter>, Twitter.TwitterService.ITwitter {
        
        public TwitterClient() {
        }
        
        public TwitterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TwitterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TwitterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TwitterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Register(string email, string username, string password, string name) {
            return base.Channel.Register(email, username, password, name);
        }
        
        public System.Threading.Tasks.Task<int> RegisterAsync(string email, string username, string password, string name) {
            return base.Channel.RegisterAsync(email, username, password, name);
        }
        
        public int Login(string user, string password) {
            return base.Channel.Login(user, password);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string user, string password) {
            return base.Channel.LoginAsync(user, password);
        }
        
        public bool Update(int id, string email, string username, string password, string name) {
            return base.Channel.Update(id, email, username, password, name);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(int id, string email, string username, string password, string name) {
            return base.Channel.UpdateAsync(id, email, username, password, name);
        }
        
        public bool Follow(int follower, int followed) {
            return base.Channel.Follow(follower, followed);
        }
        
        public System.Threading.Tasks.Task<bool> FollowAsync(int follower, int followed) {
            return base.Channel.FollowAsync(follower, followed);
        }
        
        public int NewTwitControl(int id, System.DateTime lastDate) {
            return base.Channel.NewTwitControl(id, lastDate);
        }
        
        public System.Threading.Tasks.Task<int> NewTwitControlAsync(int id, System.DateTime lastDate) {
            return base.Channel.NewTwitControlAsync(id, lastDate);
        }
        
        public Twitter.TwitterService.TwitLocal[] GetNewTwits(int id, System.DateTime lastDate) {
            return base.Channel.GetNewTwits(id, lastDate);
        }
        
        public System.Threading.Tasks.Task<Twitter.TwitterService.TwitLocal[]> GetNewTwitsAsync(int id, System.DateTime lastDate) {
            return base.Channel.GetNewTwitsAsync(id, lastDate);
        }
        
        public bool AddNewTwit(int id, string content) {
            return base.Channel.AddNewTwit(id, content);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewTwitAsync(int id, string content) {
            return base.Channel.AddNewTwitAsync(id, content);
        }
        
        public bool TwitFav(int id, int twitId) {
            return base.Channel.TwitFav(id, twitId);
        }
        
        public System.Threading.Tasks.Task<bool> TwitFavAsync(int id, int twitId) {
            return base.Channel.TwitFavAsync(id, twitId);
        }
        
        public Twitter.TwitterService.TwitLocal[] GetAllTwits(int id) {
            return base.Channel.GetAllTwits(id);
        }
        
        public System.Threading.Tasks.Task<Twitter.TwitterService.TwitLocal[]> GetAllTwitsAsync(int id) {
            return base.Channel.GetAllTwitsAsync(id);
        }
        
        public Twitter.TwitterService.KisiLocal GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<Twitter.TwitterService.KisiLocal> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public Twitter.TwitterService.KisiLocal Search(string contains) {
            return base.Channel.Search(contains);
        }
        
        public System.Threading.Tasks.Task<Twitter.TwitterService.KisiLocal> SearchAsync(string contains) {
            return base.Channel.SearchAsync(contains);
        }
    }
}
